---
- name: Create a keycloak client for Portal
  hosts: localhost
  vars_files:
    - ./keycloak-vars.yaml
  tasks:
    - name: Get admin token
      uri:
        url: "{{ keycloak_url }}/realms/{{ realm }}/protocol/openid-connect/token"
        method: POST
        body:
          client_id: admin-cli
          username: admin
          password: admin
          grant_type: password
        body_format: form-urlencoded
        validate_certs: false
      register: admin_token

    - name: create initial token to register the client
      uri:
        url: "{{ keycloak_url }}/admin/realms/{{ realm }}/clients-initial-access"
        method: POST
        return_content: true
        validate_certs: false
        body:
          expiration: 0
          count: 1
        body_format: json
        headers:
          authorization: "Bearer {{ admin_token.json.access_token }}"
          content-type: application/json
      register: client_token
    
    - name: Register client  
      uri:
        url: "{{ keycloak_url }}/realms/{{ realm }}/clients-registrations/default"
        method: POST
        return_content: true
        validate_certs: false
        body:
          clientId: "{{ keycloak_client_id }}"
        body_format: json
        headers:
          authorization: "Bearer {{ admin_token.json.access_token }}"
          content-type: application/json
        status_code: [201, 200]
      register: access_token

    - name: Register Portal with Keycloak
      keycloak_client:
        token: "{{ admin_token.json.access_token }}"
        auth_keycloak_url: "{{ keycloak_url }}"
        auth_client_id: admin-cli
        client_authenticator_type: client-secret
        client_id: "{{ keycloak_client_id }}"
        authorization_services_enabled: True
        service_accounts_enabled: True
        standard_flow_enabled: True
        redirect_uris: "{{ portal_redirect_uris }}"
        protocol: openid-connect
        protocol_mappers:
          - config:
              access.token.claim: True
              claim.name: "group"
              id.token.claim: True
              jsonType.label: String
              user.attribute: "group"
              userinfo.token.claim: True
            name: group
            protocol: openid-connect
            protocolMapper: oidc-usermodel-attribute-mapper
            consentRequired: false
        state: present
        enabled: True
        validate_certs: false 
      delegate_to: localhost

    - name: Get new client secret to be used by Portal
      uri:
        url: "{{ keycloak_url }}/admin/realms/{{ realm }}/clients/{{ access_token.json.id }}/client-secret"
        method: POST
        return_content: true
        headers:
          authorization: "Bearer {{ admin_token.json.access_token }}"
          content-type: application/json
        body_format: json 
        validate_certs: false
      register: client_secret 

    - name: Apply secret to current k8s cluster context
      kubernetes.core.k8s:
        state: present
        definition: 
          apiVersion: v1
          kind: Secret
          type: Opaque             
          metadata:
            name: "{{ portal_namespace }}-portal-oidc-secret"
            namespace: "{{ portal_namespace }}" 
          data:
            client_secret: "{{ client_secret.json.value | b64encode }}"